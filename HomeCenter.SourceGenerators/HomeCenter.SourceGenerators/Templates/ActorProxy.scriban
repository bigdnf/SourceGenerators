{{ for using in Usings ~}}
using {{ using }}
{{ end ~}}

namespace {{Namespace}}
{
    public class {{ClassName}} : {{ClassBase}}
    {
        protected async override Task ReceiveAsyncInternal(Proto.IContext context)
        {
            if (await HandleSystemMessages(context))
                return;
            var msg = FormatMessage(context.Message);
            if (msg is HomeCenter.Model.Messages.ActorMessage ic)
            {
                ic.Context = context;
            }

            {{- # Generate list of query handlers -}}
            {{- for query in Queries }}
            {{ if for.index == 0 }}
            if 
            {{- else -}}
            else if
            {{- end -}}
            (msg is {{query.ParameterType}} query_{{for.index}})
            {
                var result = await {{query.MethodName}}(query_{{for.index}});
                context.Respond(result);
                return;
            }
            {{- end ~}}

            {{- # Generate list of command handlers -}}
            {{- for command in Commands }}
            {{ if for.index == 0 }}
            if 
            {{- else -}}
            else if
            {{- end -}}
            (msg is {{command.ParameterType}} command_{{for.index}})
            {
                await {{command.MethodName}}(command_{{for.index}});
                return;
            }
            {{- end ~}}

            {{- # Generate list of event handlers -}}
            {{- for event in Events }}
            {{ if for.index == 0 }}
            if 
            {{- else -}}
            else if
            {{- end -}}
            (msg is CapabilitiesQuery event_{{for.index}})
            {
                await OnSystemStarted(event_{{for.index}});
                return;
            }
            {{- end ~}}


            await UnhandledMessage(msg);
        }
    }
}