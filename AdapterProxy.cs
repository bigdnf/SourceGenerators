// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using HomeCenter.Adapters.PC.Messages;
using HomeCenter.Adapters.PC.Model;
using HomeCenter.CodeGeneration;
using HomeCenter.Model.Adapters;
using HomeCenter.Model.Capabilities;
using HomeCenter.Model.Messages;
using HomeCenter.Model.Messages.Commands;
using HomeCenter.Model.Messages.Commands.Device;
using HomeCenter.Model.Messages.Commands.Service;
using HomeCenter.Model.Messages.Queries.Device;
using Proto;
using System;
using System.Threading.Tasks;
using HomeCenter.Model.Core;
using Microsoft.Extensions.Logging;

namespace HomeCenter.Adapters.PC
{
    [ProxyClass]
    public class PcAdapterProxy : PcAdapter
    {
        protected async override Task ReceiveAsyncInternal(Proto.IContext context)
        {
            if (await HandleSystemMessages(context))
                return;
            var msg = FormatMessage(context.Message);
            if (msg is HomeCenter.Model.Messages.ActorMessage ic)
            {
                ic.Context = context;
            }

            if (msg is RefreshCommand command_0)
            {
                await Handle(command_0).ConfigureAwait(false);
                return;
            }
            else if (msg is TurnOnCommand command_1)
            {
                await Handle(command_1).ConfigureAwait(false);
                return;
            }
            else if (msg is TurnOffCommand command_2)
            {
                await Handle(command_2).ConfigureAwait(false);
                return;
            }
            else if (msg is VolumeUpCommand command_3)
            {
                await Handle(command_3).ConfigureAwait(false);
                return;
            }
            else if (msg is VolumeDownCommand command_4)
            {
                await Handle(command_4).ConfigureAwait(false);
                return;
            }
            else if (msg is VolumeSetCommand command_5)
            {
                await Handle(command_5).ConfigureAwait(false);
                return;
            }
            else if (msg is MuteCommand command_6)
            {
                await Handle(command_6).ConfigureAwait(false);
                return;
            }
            else if (msg is UnmuteCommand command_7)
            {
                await Handle(command_7).ConfigureAwait(false);
                return;
            }
            else if (msg is InputSetCommand command_8)
            {
                await Handle(command_8).ConfigureAwait(false);
                return;
            }

            if (msg is DiscoverQuery query_0)
            {
                var result = Discover(query_0);
                context.Respond(result);
                return;
            }

            ;
            await UnhandledMessage(msg);
        }

        public PcAdapterProxy(IMessageBroker messageBroker, ILogger<PcAdapterProxy> logger)
        {
            Logger = logger;
            MessageBroker = messageBroker;
        }
    }
}